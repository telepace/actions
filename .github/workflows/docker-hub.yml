name: '*构建镜像并推送至docker hub'

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repoUrl:
        description: 'Git 仓库克隆 URL 地址（格式：owner/repo）'
        required: true
      imageName:
        description: '构建镜像的名称, 不填写根据 git 地址自动生成'
        required: false
      repoBranch:
        description: '指定 git 分支'
        required: false
      dockerFileUrl:
        description: '自定义 Dockerfile 下载路径, 可空'
        required: false
      shellUrl:
        description: '自定义构建前脚本下载路径, 可空'
        required: false
      shell:
        description: '构建前运行 shell 命令, 执行 mv Dockerfile 等操作'
        required: false
      platforms:
        description: '需要构建的平台'
        required: false
        default: linux/amd64,linux/arm64/v8
      tags:
        description: '自定义 Docker Tags, 多个使用逗号分隔'
        required: false
        default: latest
      timeTagsFormat:
        description: '根据时间自动生成的 Docker Tag'
        type: choice
        default: 月-日_时-分-秒
        options:
          - 不生成时间tag
          - 年-月-日_时-分-秒
          - 年-月-日_时-分
          - 月-日_时-分-秒
          - 月-日_时-分
      timeTagsPrefix:
        description: '根据时间生成 Tag 的前缀'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }} # 用于私有仓库克隆
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3

      - name: Setup timezone
        uses: zcong1993/setup-timezone@master
        with:
          timezone: Asia/Shanghai

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y git wget

      - name: Extract repository name
        id: extract_repo
        run: |
          REPO_URL="${{ github.event.inputs.repoUrl }}"
          REPO_NAME=$(echo "$REPO_URL" | awk -F 'github.com/' '{print $2}' | sed 's/.git$//')
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Checkout target repository
        uses: actions/checkout@v3
        with:
          repository: ${{ steps.extract_repo.outputs.repo_name }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          ref: ${{ github.event.inputs.repoBranch }}
          path: target-repo

      - name: Prepare target repository
        run: |
          cd target-repo
          
          # 下载自定义 Dockerfile
          if [[ -n "${{ github.event.inputs.dockerFileUrl }}" ]]; then
            wget "${{ github.event.inputs.dockerFileUrl }}" -O Dockerfile
          fi

          # 下载并运行自定义脚本
          if [[ -n "${{ github.event.inputs.shellUrl }}" ]]; then
            wget "${{ github.event.inputs.shellUrl }}" -O /tmp/.customize_shell.sh
            chmod +x /tmp/.customize_shell.sh
            /tmp/.customize_shell.sh
          fi

          # 运行自定义 Shell 命令
          if [[ -n "${{ github.event.inputs.shell }}" ]]; then
            eval "${{ github.event.inputs.shell }}"
          fi

          # 生成镜像名称
          imageName="${{ github.event.inputs.imageName }}"
          if [[ -z "$imageName" ]]; then
            imageName=$(basename "${{ github.event.inputs.repoUrl }}" .git)
            imageName=$(echo "$imageName" | tr '[:upper:]' '[:lower:]')
            echo "auto docker image name ${{ github.event.inputs.repoUrl }} => $imageName"
          fi

          # 设置输出变量
          echo "IMAGE_NAME=$imageName" >> $GITHUB_ENV
          echo "::set-output name=image_name::$imageName"

      - name: Generate Docker Tags
        id: generate_tags
        run: |
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          CUSTOM_TAGS="${{ github.event.inputs.tags }}"
          TIME_TAGS_FORMAT="${{ github.event.inputs.timeTagsFormat }}"
          TIME_TAGS_PREFIX="${{ github.event.inputs.timeTagsPrefix }}"

          TAGS=()

          # 添加自定义标签
          if [[ -n "$CUSTOM_TAGS" ]]; then
            IFS=',' read -ra CUSTOM_TAG_ARRAY <<< "$CUSTOM_TAGS"
            for tag in "${CUSTOM_TAG_ARRAY[@]}"; do
              TAGS+=("${IMAGE_NAME}:${tag}")
            done
          else
            TAGS+=("${IMAGE_NAME}:latest")
          fi

          # 添加基于时间的标签
          if [[ "$TIME_TAGS_FORMAT" != "不生成时间tag" ]]; then
            case "$TIME_TAGS_FORMAT" in
              "年-月-日_时-分-秒")
                TIME_TAG=$(date +"%Y-%m-%d_%H-%M-%S")
                ;;
              "年-月-日_时-分")
                TIME_TAG=$(date +"%Y-%m-%d_%H-%M")
                ;;
              "月-日_时-分-秒")
                TIME_TAG=$(date +"%m-%d_%H-%M-%S")
                ;;
              "月-日_时-分")
                TIME_TAG=$(date +"%m-%d_%H-%M")
                ;;
              *)
                TIME_TAG=""
                ;;
            esac

            if [[ -n "$TIME_TAGS_PREFIX" ]]; then
              TIME_TAG="${TIME_TAGS_PREFIX}${TIME_TAG}"
            fi

            if [[ -n "$TIME_TAG" ]]; then
              TAGS+=("${IMAGE_NAME}:${TIME_TAG}")
            fi
          fi

          # 输出标签
          TAGS_STRING=$(IFS=','; echo "${TAGS[*]}")
          echo "tags=$TAGS_STRING" >> $GITHUB_OUTPUT
          echo "Generated Docker tags: $TAGS_STRING"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ github.event.inputs.platforms }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./target-repo
          file: ./target-repo/Dockerfile
          push: true
          tags: ${{ steps.generate_tags.outputs.tags }}
          platforms: ${{ github.event.inputs.platforms }}

      - name: Image digest
        run: echo "Docker Image Digest: ${{ steps.docker_build.outputs.digest }}"
